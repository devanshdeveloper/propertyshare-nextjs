generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model User {
    id            String                @id @default(uuid())
    name          String
    email         String?               @unique
    emailVerified DateTime?             @map("email_verified")
    image         String?
    admin         Boolean?              @default(false)
    createdAt     DateTime              @default(now())
    updatedAt     DateTime              @updatedAt
    properties    Property[]            @relation("posted")
    favorites     PropertiesFavByUser[]
    accounts      Account[]
    sessions      Session[]

    @@map("users")
}

model PropertiesFavByUser {
    id         String   @id @default(uuid())
    userId     String
    user       User     @relation(fields: [userId], references: [id])
    propertyId String
    property   Property @relation(fields: [propertyId], references: [id])
    assignedAt DateTime @default(now())
}

model Property {
    id           String  @id @default(cuid())
    name         String
    slug         String  @unique
    images       String?
    location     String
    city         String
    area         Int
    pricePSF     Int
    yield        Float
    returnTarget Float
    type         String?
    // residential, commercial, lots, rental, land
    views        Int     @default(0)
    approved     Boolean @default(false)
    postedBy     User    @relation("posted", fields: [postedById], references: [id])
    postedById   String

    PropertiesFavByUser PropertiesFavByUser[]
}

model Account {
    id                String   @id @default(cuid())
    userId            String   @map("user_id")
    type              String?
    provider          String
    providerAccountId String   @map("provider_account_id")
    token_type        String?
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    scope             String?
    id_token          String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    userId       String?  @map("user_id")
    sessionToken String   @unique @map("session_token")
    accessToken  String?  @map("access_token")
    expires      DateTime
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@map("sessions")
}

model VerificationRequest {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}
